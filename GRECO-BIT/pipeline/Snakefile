################################################################
## Import functions
import os
import itertools
import re
import subprocess
from snakemake.utils import R
# configfile: "config.yaml"


##########################
## Initialize variables ##
##########################

## Transcription Factor names
(FOLDERS, ENCODE_TFs) = glob_wildcards(os.path.join(config["data_dir"], "{Folders}", "{TF}.chipseq.train.interval"))

## TF names with number of discovered motifs
## Use this to avoid the use of dynamic files
##
## NOTE 1: this is the folder structure required to execute the rules in Step 2.
## This structure is automatically produced by the rules launched to produce the
## files in the step 1.
(F, TFs, NB) = glob_wildcards(os.path.join(config["out_dir"], "{F}", "motifs", "jaspar", "pfm", "{TF}_peak-motifs_m{NB}.jaspar"))

## Peak summit extension (both sides)
PEAK_LENGTH = "101 501".split()
PEAK_EXTENSIONS =  {
    '101' : '50',
    '501' : '250'
}

##################
## Output files ##
##################

## Peak summit bed
PEAK_SUMMIT_BED = expand(os.path.join(config["out_dir"], "{TF}", "peak_summits", "{TF}_peak_summits.bed"), TF = ENCODE_TFs)

## Extended peaks
EXTENDED_PEAKS_BED = expand(os.path.join(config["out_dir"], "{TF}", "extended_peaks", "{TF}.{length}bp.bed"), TF = ENCODE_TFs, length = PEAK_LENGTH)

## FASTA peaks
PEAKS_FASTA = expand(os.path.join(config["out_dir"], "{TF}", "fasta", "{TF}.{length}bp.fa"), TF = ENCODE_TFs, length = PEAK_LENGTH)

## Discovered motifs (RSAT peak-motifs)
MOTIFS_RSAT_TF = expand(os.path.join(config["out_dir"], "{TF}", "peak-motifs", "results", "discovered_motifs", "{TF}_motifs_discovered.tf"), TF = ENCODE_TFs)
#MOTIFS_RSAT_TF = expand(os.path.join(config["out_dir"], "{TF}", "peak-motifs", "results", "discovered_motifs", "{TF}_motifs_discovered_table.tab"), TF = ENCODE_TFs)

## Motif formatting
MOTIFS_RSAT_JASPAR = expand(os.path.join(config["out_dir"], "{TF}", "motifs", "jaspar", "pfm", "{TF}_matrix_list.tab"), TF = ENCODE_TFs)

## Matrix sites
MOTIF_RSAT_SITES = expand(os.path.join(config["out_dir"], "{TF}", "matrix_sites", "{TF}_peak-motifs_m{n}.tf.sites"), zip, TF = TFs, n = NB)
MOTIF_RSAT_SITES_BED = expand(os.path.join(config["out_dir"], "{TF}", "matrix_sites", "{TF}_peak-motifs_m{n}.tf.sites.bed"),  zip, TF = TFs, n = NB)
MOTIF_RSAT_SITES_FASTA = expand(os.path.join(config["out_dir"], "{TF}", "matrix_sites", "{TF}_peak-motifs_m{n}.tf.sites.fasta"), zip, TF = TFs, n = NB)

## PWMs
PWM_JASPAR = expand(os.path.join(config["out_dir"], "{TF}", "motifs", "jaspar", "pwm", "{TF}_peak-motifs_m{n}.jaspar.pssm"), zip, TF = TFs, n = NB)

## Logos
JASPAR_LOGOS = expand(os.path.join(config["out_dir"], "{TF}", "motifs", "jaspar", "logos", "{TF}_peak-motifs_m{n}_logo.png"), zip, TF = TFs, n = NB)

## PWM scanning
PWM_SCAN = expand(os.path.join(config["out_dir"], "{TF}", "scan", "501bp", "{TF}_m{n}.501bp.fa"), zip, TF = TFs, n = NB)

## Central erichment
CENTRIMO_PVAL = expand(os.path.join(config["out_dir"], "{TF}", "central_enrichment", "{TF}_m{n}.501bp.fa.sites.centrimo"), zip, TF = TFs, n = NB)
CENTRIMO_PLOT = expand(os.path.join(config["out_dir"], "{TF}", "central_enrichment", "{TF}_m{n}.501bp.fa.sites.centrimo.pdf"), zip, TF = TFs, n = NB)
CENTRIMO_BEST = expand(os.path.join(config["out_dir"], "{TF}", "central_enrichment", "selected_motif", "{TF}.501bp.fa.sites.centrimo.best"), TF = TFs)
MOST_ENRICHED_MOTIF_ASSOC = expand(os.path.join(config["out_dir"], "{TF}", "central_enrichment", "selected_motif", "{TF}.501bp.fa.sites.centrimo.best.TF_associated"), TF = TFs)
MOST_ENRICHED_MOTIF_ASSOC_LOGO = expand(os.path.join(config["out_dir"], "{TF}", "central_enrichment", "selected_motif", "{TF}.501bp.fa.sites.centrimo.best.TF_associated.tex"), TF = TFs, n = NB)

## Selected motifs to curate
MOTIFS_TO_CURATE = os.path.join(config["curation_dir"], "Selected_motifs_to_curate_log10_pval_-200.tab")

################################################################
## Rules
rule all:
           #############################
           ## Step 1: motif discovery ##
           #############################
    input: PEAK_SUMMIT_BED, \
           EXTENDED_PEAKS_BED, \
           PEAKS_FASTA, \
           MOTIFS_RSAT_TF, \
           MOTIFS_RSAT_JASPAR, \
           MOTIF_RSAT_SITES, \
           MOTIF_RSAT_SITES_BED, \
           MOTIF_RSAT_SITES_FASTA, \

           ########################
           ## Step 2: centrality ##
           ########################
           PWM_JASPAR, \
           JASPAR_LOGOS, \
           PWM_SCAN, \
           CENTRIMO_PVAL, \
           CENTRIMO_PLOT, \
           CENTRIMO_BEST, \
           MOST_ENRICHED_MOTIF_ASSOC, \
           MOST_ENRICHED_MOTIF_ASSOC_LOGO, \
           MOTIFS_TO_CURATE, \
           os.path.join(config["curation_dir"], "Selected_motifs_to_curate_log10_pval_-200.pdf"), \

#######################
## ChIP-seq datasets ##
#######################
rule extract_peak_summits:
    """
    Extract peak summits: chromosome, start, end

    In the awk code, the column 10 corresponds to the shift where the peak summit is located, relative to the peak start.
    """
    input:
        os.path.join(config["data_dir"], "{TF}", "{TF}.chipseq.train.interval")
    output:
        os.path.join(config["out_dir"], "{TF}", "peak_summits", "{TF}_peak_summits.bed")
    message:
        "; Peak summits - TF : {wildcards.TF}"
    priority:
        100
    shell:
        """
        awk 'BEGIN{{FS="\\t"; OFS="\\t"}} {{print $1, $2+$10, $2+$10+1}}' {input} > {output}
        """

rule extend_peak_files:
    """
    Extend the peak summits to both sides.
    """
    input:
        os.path.join(config["out_dir"], "{TF}", "peak_summits", "{TF}_peak_summits.bed")
    output:
        os.path.join(config["out_dir"], "{TF}", "extended_peaks", "{TF}.{length}bp.bed")
    message:
        "; Extending peak summits - TF : {wildcards.TF} - Final length: {wildcards.length}"
    params:
        genome = config["genome_size"],
        slop = lambda wildcards: PEAK_EXTENSIONS[wildcards.length]
    priority:
        99
    shell:
        """
        bedtools slop -b {params.slop} -i {input} -g {params.genome} > {output}
        """

rule get_fasta_sequences:
    """
    Get the fasta sequences for the extended peaks
    """
    input:
        os.path.join(config["out_dir"], "{TF}", "extended_peaks", "{TF}.{length}bp.bed")
    output:
        os.path.join(config["out_dir"], "{TF}", "fasta", "{TF}.{length}bp.fa")
    message:
        "; Retrieving FASTA sequences from extended peaks - TF : {wildcards.TF} - Length: {wildcards.length}"
    params:
        genome = config["genome_fasta"]
    priority:
        98
    shell:
        """
        bedtools getfasta -fi {params.genome} -bed {input} -fo {output}
        """

###################
## RSAT analysis ##
###################
rule RSAT_peakmotifs_per_exp:
    """
    Run RSAT peak-motifs (motif discovery with different algorithms) on every peakset.

    The set of N discovered motifs is stored in a single transfac file.
    """
    input:
        os.path.join(config["out_dir"], "{TF}", "fasta", "{TF}.101bp.fa")
    output:
        os.path.join(config["out_dir"], "{TF}", "peak-motifs", "results", "discovered_motifs", "{TF}_motifs_discovered.tf")
    message:
        "; Running RSAT peak-motifs - TF : {wildcards.TF} "
    priority:
        97
    params:
        RSAT = config["RSAT"],
        disco = config["peakmotifs_disco"],
        nb_motifs = config["peakmotifs_disco_nb_motifs"],
        min_oligo = config["peakmotifs_disco_min_oligo"],
        max_oligo = config["peakmotifs_disco_max_oligo"],
        ci = config["peakmotifs_class_interval"],
        jaspar2020 = os.path.join(config["motif_databases"], "JASPAR2020_CORE_vertebrates_non-redundant_pfms.tf"),
        task = "purge,seqlen,composition,disco,merge_motifs,split_motifs,motifs_vs_motifs,timelog,archive,synthesis,small_summary,motifs_vs_db,scan",
        prefix = "{TF}",
        peakmo_outdir = os.path.join(config["out_dir"], "{TF}", "peak-motifs")
    shell:
        """
        {params.RSAT}/perl-scripts/peak-motifs -v 2 \
        -r_plot \
        -title {wildcards.TF} \
        -i {input} \
        -markov auto \
        -disco {params.disco} \
        -nmotifs {params.nb_motifs} \
        -minol {params.min_oligo} \
        -maxol {params.max_oligo} \
        -no_merge_lengths \
        -ci {params.ci} \
        -noov \
        -2str \
        -origin center \
        -motif_db jaspar_vertebrates tf {params.jaspar2020} \
        -scan_markov 1 \
        -task {params.task} \
        -prefix {params.prefix} \
        -img_format png \
        -outdir {params.peakmo_outdir}
        """

##############################
## Matrix format conversion ##
##############################
rule RSAT_PSSM_to_JASPAR_format:
    """
    Convert the RSAT discovered matrices from transfac (tf) format to JASPAR format.

    The transfac file is split in several files (one per motif) adding as suffix the motif number (e.g., 1,2,3,...).
    """
    input:
        os.path.join(config["out_dir"], "{TF}", "peak-motifs", "results", "discovered_motifs", "{TF}_motifs_discovered.tf")
    output:
        os.path.join(config["out_dir"], "{TF}", "motifs", "jaspar", "pfm", "{TF}_matrix_list.tab")
    message:
        "; Converting RSAT motifs (tf format) to JASPAR format - TF : {wildcards.TF} "
    priority:
        96
    params:
        RSAT = config["RSAT"],
        return_fields = "counts",
        prefix = "peak-motifs",
        out_dir = os.path.join(config["out_dir"], "{TF}", "motifs", "jaspar", "pfm", "{TF}", )
    shell:
        """
        {params.RSAT}/perl-scripts/convert-matrix -v 2 \
        -from tf -to jaspar \
        -i {input} \
        -return {params.return_fields} \
        -split \
        -prefix {params.prefix} \
        -o {params.out_dir} ;

        {params.RSAT}/perl-scripts/convert-matrix -v 2 \
        -from tf -to tab \
        -i {input} \
        -return {params.return_fields} \
        -split \
        -prefix {params.prefix} \
        -o {params.out_dir}
        """

## NOTE 2: The 'motif_tab' input file name is used to chain the rule
## 'RSAT_PSSM_to_JASPAR_format' with 'JASPAR_PSSM_to_PWM'.
##
## NOTE 3: Use the zip parameter to have a correct correspondency between the
## experiments (TF) and the number of the discovered motif (the number may vary
## depending the experiment), if zip is not used, snakemake will try to create
## all the combinations between TFs and number of motifs, since not all the TF
## produce the same number of motifs, the workflow will crash.
rule JASPAR_PSSM_to_PWM:
    """
    Convert the JASPAR PSSMs in PWMs.

    This rule is executed for each discovered motif.
    """
    input:
        motif_tab = os.path.join(config["out_dir"], "{TF}", "motifs", "jaspar", "pfm", "{TF}_matrix_list.tab"), \
        motif = os.path.join(config["out_dir"], "{TF}", "motifs", "jaspar", "pfm", "{TF}_peak-motifs_m{n}.jaspar")
    output:
        os.path.join(config["out_dir"], "{TF}", "motifs", "jaspar", "pwm", "{TF}_peak-motifs_m{n}.jaspar.pssm")
    message:
        "; Generating PWM from JASPAR matrices - TF : {wildcards.TF} "
    priority:
        95
    params:
        scripts_bin = config["bin"]
    shell:
        """
        perl {params.scripts_bin}/PCM_to_PWM.pl \
        -f {input.motif} > {output}
        """

rule Generate_matrix_logo:
    """
    Generate motif logos using RSAT convert-matrix

    This rule is executed for each discovered motif.
    """
    input:
        os.path.join(config["out_dir"], "{TF}", "motifs", "jaspar", "pfm", "{TF}_peak-motifs_m{n}.jaspar")
    output:
        os.path.join(config["out_dir"], "{TF}", "motifs", "jaspar", "logos", "{TF}_peak-motifs_m{n}_logo.png")
    message:
        "; Generating PWM from JASPAR matrices - TF : {wildcards.TF} "
    params:
        logo_dir = os.path.join(config["out_dir"], "{TF}", "motifs", "jaspar", "logos"),
        logo_name = "{TF}_peak-motifs_m{n}",
        RSAT = config["RSAT"]
    priority:
        94
    shell:
        """
        {params.RSAT}/perl-scripts/convert-matrix -v 2 \
        -i {input} \
        -from jaspar -to jaspar \
        -return logo \
        -logo_dir {params.logo_dir} \
        -logo_no_title \
        -prefix {params.logo_name}
        """

#########################################
## Matrix scan: find RSAT matrix sites ##
#########################################
rule find_RSAT_matrix_sites:
    """
    Find the TFBSs used to built the matrices.

    This rule is executed for each discovered motif.
    """
    input:
        motif_tab = os.path.join(config["out_dir"], "{TF}", "motifs", "jaspar", "pfm", "{TF}_matrix_list.tab"), \
        sequences = os.path.join(config["out_dir"], "{TF}", "peak-motifs", "data", "sequences", "{TF}_test.fasta"), \
        matrix = os.path.join(config["out_dir"], "{TF}", "motifs", "jaspar", "pfm", "{TF}_peak-motifs_m{n}.tab"), \
        bg_file = os.path.join(config["out_dir"], "{TF}", "peak-motifs", "results", "composition", "{TF}_test_inclusive-1str-ovlp_2nt.txt")
    output:
        os.path.join(config["out_dir"], "{TF}", "matrix_sites", "{TF}_peak-motifs_m{n}.tf.sites")
    message:
        "; Scanning PSSM on 101bp peaks - TF : {wildcards.TF} - Matrix number: {wildcards.n}"
    params:
        RSAT = config["RSAT"]
    priority:
        93
    shell:
        """
        {params.RSAT}/bin/matrix-scan-quick \
        -i {input.sequences} \
        -m {input.matrix} \
        -bgfile {input.bg_file} \
        -t 5 \
        -return sites > {output}
        """

rule convert_RSAT_matrix_sites_to_BED:
    """
    Get the genomic coordinates (BED file) of the matrix sites.

    This rule is executed for each discovered motif.
    """
    input:
        os.path.join(config["out_dir"], "{TF}", "matrix_sites", "{TF}_peak-motifs_m{n}.tf.sites")
    output:
        os.path.join(config["out_dir"], "{TF}", "matrix_sites", "{TF}_peak-motifs_m{n}.tf.sites.bed")
    message:
        "; Obtaining genomic coordinates for sites - TF : {wildcards.TF} - Matrix number: {wildcards.n}"
    params:
        scripts_bin = config["bin"]
    priority:
        92
    shell:
        """
        awk -f {params.scripts_bin}/sites-to-bed.awk {input} > {output}
        """

rule get_RSAT_matrix_sites_fasta:
    """
    Get the fasta sequences from genomic coordinates (BED file) of the matrix sites.

    This rule is executed for each discovered motif.
    """
    input:
        os.path.join(config["out_dir"], "{TF}", "matrix_sites", "{TF}_peak-motifs_m{n}.tf.sites.bed")
    output:
        os.path.join(config["out_dir"], "{TF}", "matrix_sites", "{TF}_peak-motifs_m{n}.tf.sites.fasta")
    message:
        "; Obtaining fasta sequences from genomic coordinates for TFBS sites - TF : {wildcards.TF} - Matrix number: {wildcards.n}"
    params:
        genome_fasta = config["genome_fasta"]
    priority:
        91
    shell:
        """
        bedtools getfasta -name -s -fi {params.genome_fasta} -bed {input} -fo {output}
        """

#########################################
## Matrix scan: extended peaks (501bp) ##
#########################################
rule Scan_JASPAR_PWM:
    """
    Scan the PWM in the extended peaks (501bp).

    This rule is executed for each discovered motif.
    """
    input:
        pwm = os.path.join(config["out_dir"], "{TF}", "motifs", "jaspar", "pwm", "{TF}_peak-motifs_m{n}.jaspar.pssm"), \
        peaks = os.path.join(config["out_dir"], "{TF}", "fasta", "{TF}.501bp.fa")
    output:
        os.path.join(config["out_dir"], "{TF}", "scan", "501bp", "{TF}_m{n}.501bp.fa")
    message:
        "; Scanning PSSM - TF : {wildcards.TF} - Matrix number: {wildcards.n}"
    params:
        scripts_bin = config["bin"]
    priority:
        90
    shell:
        """
        {params.scripts_bin}/pwm_searchPFF {input.pwm} {input.peaks} 0.85 -b > {output}
        """

###############################
## Centrality test and plots ##
###############################
rule Calculate_centrimo_pvalue:
    """
    Calculate p-value for central enrichment.

    This rule is executed for each discovered motif.
    """
    input:
        sites = os.path.join(config["out_dir"], "{TF}", "scan", "501bp", "{TF}_m{n}.501bp.fa"),
        peaks = os.path.join(config["out_dir"], "{TF}", "extended_peaks", "{TF}.501bp.bed")
    output:
        os.path.join(config["out_dir"], "{TF}", "central_enrichment", "{TF}_m{n}.501bp.fa.sites.centrimo")
    message:
        "; Calculating central enrichment around peak summits - TF : {wildcards.TF} - Matrix number: {wildcards.n}"
    params:
        scripts_bin = config["bin"],
        centrimo_folder = os.path.join(config["out_dir"], "{TF}", "central_enrichment")
    priority:
        89
    shell:
        """
        mkdir -p {params.centrimo_folder} ;

        nb_TFBS="$(wc -l {input.sites} | cut -d ' ' -f 1)" ;

        nb_peaks="$(wc -l {input.peaks} | cut -d " " -f 1)" ;

        {params.scripts_bin}/centrimo_pval {input.sites} ${{nb_TFBS}} ${{nb_peaks}} 250 > {output}
        """

rule generate_centrimo_plots:
    """
    Generate centrimo plots (local enrichment) around the peak summits.

    This rule is executed for each discovered motif.
    """
    input:
        os.path.join(config["out_dir"], "{TF}", "scan", "501bp", "{TF}_m{n}.501bp.fa")
    output:
        os.path.join(config["out_dir"], "{TF}", "central_enrichment", "{TF}_m{n}.501bp.fa.sites.centrimo.pdf")
    message:
        "; Scanning PSSM - TF : {wildcards.TF} - Matrix number: {wildcards.n}"
    params:
        scripts_bin = config["bin"]
    priority:
        88
    shell:
        """
        R --vanilla --slave --silent -f {params.scripts_bin}/centrimo_plot.R --args {input} {output}
        """

rule choose_best_centrimo_experiment:
    """
    Select the motif with the best (lowest) centrimo p-value.

    This rule is executed for each dataset (experiment).
    """
    input:
        os.path.join(config["out_dir"], "{TF}", "motifs", "jaspar", "pfm", "{TF}_matrix_list.tab")
    output:
        os.path.join(config["out_dir"], "{TF}", "central_enrichment", "selected_motif", "{TF}.501bp.fa.sites.centrimo.best")
    message:
        "; Selecting the most centrally enriched motif - TF : {wildcards.TF} "
    params:
        scripts_bin = config["bin"],
        centrimo_dir = os.path.join(config["out_dir"], "{TF}", "central_enrichment")
    priority:
        87
    shell:
        """
        bash {params.scripts_bin}/best_centrimo.sh -i {params.centrimo_dir} > {output}
        """

## NOTE 4: the awk variables are relative to the experiment table.
rule annotate_best_centrimo_experiment:
    """
    Assign the TF name to the selected motif.

    This rule is executed for the best experiment of each dataset (experiment). Make sure the experiment map has the experiment ID in the first field, and the TF name in the third field
    """
    input:
        #tf_jaspar_map = config["TF_Experiment_map"],
        best_exp = os.path.join(config["out_dir"], "{TF}", "central_enrichment", "selected_motif", "{TF}.501bp.fa.sites.centrimo.best")
    output:
        os.path.join(config["out_dir"], "{TF}", "central_enrichment", "selected_motif", "{TF}.501bp.fa.sites.centrimo.best.TF_associated")
    message:
        "; Assigning TF name to the experiment: {wildcards.TF} "
    params:
        experiment = "{TF}",
        scripts_bin = config["bin"]
    priority:
        86
    shell:
        """
        perl {params.scripts_bin}/annotate_best_centrimo_experiment.pl --best {input.best_exp} --experiment {params.experiment} --output {output}
        """

rule best_centrimo_experiment_logo:
    """
    Export a PDF file with the motif logo, experiment, TF name and centrality p-value.

    This rule is executed for the best experiment of each dataset (experiment).
    """
    input:
        os.path.join(config["out_dir"], "{TF}", "central_enrichment", "selected_motif", "{TF}.501bp.fa.sites.centrimo.best.TF_associated")
    output:
        os.path.join(config["out_dir"], "{TF}", "central_enrichment", "selected_motif", "{TF}.501bp.fa.sites.centrimo.best.TF_associated.tex")
    message:
        "; Generating latex logo for selected motif: {wildcards.TF} "
    params:
        scripts_bin = config["bin"]
    priority:
        85
    shell:
        """
        bash {params.scripts_bin}/create_latex_logos.sh -l {params.scripts_bin}/latex_header.txt -i {input} -o {output}
        """

rule Concat_annotated_experiments:
    """
    Concatenate the tables with the annotated experiments and the centrality p-value

    """
    input:
        MOST_ENRICHED_MOTIF_ASSOC
    output:
        os.path.join(config["curation_dir"], "Annotated_experiments_cat.tab")
    message:
        "; Concatenating the tables with the annotated experiments and the centrality p-value "
    params: out_dir = config["out_dir"]
    priority:
        84
    shell:
        """
        ls {params.out_dir}/*/central_enrichment/selected_motif/*.501bp.fa.sites.centrimo.best.TF_associated | xargs cat > {output}
        """


rule Select_motifs_to_curate:
    """
    Select those motifs satisfying the centrality p-value threshold.

    """
    input:
        os.path.join(config["curation_dir"], "Annotated_experiments_cat.tab")
    output:
        os.path.join(config["curation_dir"], "Selected_motifs_to_curate_log10_pval_-200.tab")
    message:
        "; Selecting motifs to curate - Centrality p-value: {{config['central_pvalue']}} "
    params:
        central_pval = config["central_pvalue"]
    priority:
        83
    shell:
        """
        cat {input} | awk '{{ if ($5 <= {params.central_pval}) {{ print }} }}' | uniq > {output}
        """


rule Motifs_to_curate_PDF:
    """
    Concat the PDF of the selected motifs
    """
    input:
        os.path.join(config["curation_dir"], "Selected_motifs_to_curate_log10_pval_-200.tab")
    output:
        os.path.join(config["curation_dir"], "Selected_motifs_to_curate_log10_pval_-200.pdf")
    message:
        "; Concatenating PDFs with the motifs to curate "
    priority:
        82
    shell:
        """
        PDF_FILES=` awk '{{ print $7 }}' {input} | xargs `

        pdfunite $PDF_FILES {output}
        """
