#!/usr/bin/env python

from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
import click
import gzip
import os
from sklearn.model_selection import train_test_split

# Globals
scripts_dir = os.path.dirname(os.path.realpath(__file__))

CONTEXT_SETTINGS = {
    "help_option_names": ["-h", "--help"],
}

@click.command(no_args_is_help=True, context_settings=CONTEXT_SETTINGS)
@click.argument("fasta_file", type=click.Path(exists=True, resolve_path=True))
@click.option(
    "-o", "--output-dir",
    help="Output directory.",
    type=click.Path(resolve_path=True),
    default="./",
    show_default=True
)

def main(**params):

    # Create output dir
    if not os.path.exists(params["output_dir"]):
        os.makedirs(params["output_dir"])

    # Initialize
    train = []
    validation = []
    test = []
    prefixs = [["WT-unique"], ["WT-intersect", "T95R-intersect"],
        ["T95R-unique"]]

    # For each class...
    for i in range(len(prefixs)):

        # Initialize
        sequences = set()
        if i == 0:
            d = "1.;0.;0."
        elif i == 1:
            d = "0.;1.;0."
        else:
            d = "0.;0.;1."

        # For each prefix...
        for prefix in prefixs[i]:

            # Sequences
            f = os.path.join(params["sequences_dir"], f"{prefix}.fa.gz")
            for r in SeqIO.parse(gzip.open(f, "rt"), "fasta"):
                if r.seq.count("N") > 0 or r.seq.count("n") > 0:
                    continue
                sequences.add((r.seq, r.id))

        # To records
        records = [SeqRecord(s[0], id=s[1], description=d) for s in sequences]

        # Split records 80/20
        t, rest = train_test_split(records, test_size=.2, random_state=1)
        train.append(t)

        # Split the 20 split 50/50
        v, t = train_test_split(rest, test_size=.5, random_state=1)
        validation.append(v)
        test.append(t)

    # Save sequences
    f = os.path.join(params["output_dir"], "train.fa.gz")
    with gzip.open(f, "wt") as handle:
        l = max([len(i) for i in train])
        z = zip(train[0][:l], train[1][:l], train[2][:l])
        sequences = [j for i in z for j in i]
        SeqIO.write(sequences, handle, "fasta")
    f = os.path.join(params["output_dir"], "validation.fa.gz")
    with gzip.open(f, "wt") as handle:
        l = max([len(i) for i in validation])
        z = zip(validation[0][:l], validation[1][:l], validation[2][:l])
        sequences = [j for i in z for j in i]
        SeqIO.write(sequences, handle, "fasta")
    f = os.path.join(params["output_dir"], "test.fa.gz")
    with gzip.open(f, "wt") as handle:
        l = max([len(i) for i in test])
        z = zip(test[0][:l], test[1][:l], test[2][:l])
        sequences = [j for i in z for j in i]
        SeqIO.write(sequences, handle, "fasta")

if __name__ == "__main__":
    main()