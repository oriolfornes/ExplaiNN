import os
import itertools
import platform
import re
from snakemake.utils import R
import subprocess as sp

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# For every set of peaks in the "data" folder, the Snakefile will perform
# motif discovery and and calculate the centrality of each discovered motif. 
#
# The folder "data" should be structured as follows:
#
# ├── TF1.Experiment_Description.PEAKS000001
# │   └── TF1.Experiment_Description.PEAKS000001.peak_summits.bed
# ├── TF2.Experiment_Description.PEAKS000002
# │   └── TF2.Experiment_Description.PEAKS000002.peak_summits.bed
# ...
# └── TFn.Experiment_Description.PEAKS00000n
#     └── TFn.Experiment_Description.PEAKS00000n.peak_summits.bed
#
# Every sub-folder in the data folder must contain a .peak_summits.bed file
# with the same name as the sub-folder (see tree above). This data structure
# is required for the pipeline to work.
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

# ++++++++++++++++++++ #
# Get wildcards        #
# ++++++++++++++++++++ #

# Transcription factor names
(data_Fs, data_TFs) = glob_wildcards(
    os.path.join(
        config["base_dir"],
        config["data_dir"],
        "{data_F}",
        "{data_TF}_peak_summits.bed"
    )
)

# Folder structure required to execute the rules in Step 2.
# This structure is automatically generated by the rules launched to create
# the files in Step 1.
(Fs, TFs, NB) = glob_wildcards(
    os.path.join(
        config["base_dir"],
        config["results_dir"],
        "{F}",
        "motifs",
        "jaspar",
        "pfm",
        "{TF}_peak-motifs_m{NB}.jaspar"
    )
)

# ++++++++++++++++++++ #
# Output files         #
# ++++++++++++++++++++ #

# Extended peaks
peak_lengths = ["101", "501"]
EXTENDED_PEAKS_BED = expand(
    os.path.join(
        config["base_dir"], 
        config["results_dir"],
        "{TF}",
        "extended_peaks",
        "{TF}.{length}bp.bed"
    ),
    TF=data_TFs,
    length=peak_lengths
)

# FASTA peaks
PEAKS_FASTA = expand(
    os.path.join(
        config["base_dir"], 
        config["results_dir"],
        "{TF}",
        "fasta",
        "{TF}.{length}bp.fa"
    ),
    TF=data_TFs,
    length=peak_lengths
)

# Discovered motifs (RSAT peak-motifs)
MOTIFS_RSAT_TF = expand(
    os.path.join(
        config["base_dir"], 
        config["results_dir"],
        "{TF}",
        "peak-motifs",
        "results",
        "discovered_motifs",
        "{TF}_motifs_discovered.tf"
    ),
    TF=data_TFs
)

# Motif formatting
MOTIFS_RSAT_JASPAR = expand(
    os.path.join(
        config["base_dir"], 
        config["results_dir"],
        "{TF}",
        "motifs",
        "jaspar",
        "pfm",
        "{TF}_matrix_list.tab"
    ),
    TF=data_TFs
)

# PWMs
JASPAR_PWM = expand(
    os.path.join(
        config["base_dir"],
        config["results_dir"],
        "{TF}",
        "motifs",
        "jaspar",
        "pwm",
        "{TF}_peak-motifs_m{n}.jaspar.pssm"
    ),
    zip,
    TF=TFs,
    n=NB
)

# Logos
JASPAR_LOGO = expand(
    os.path.join(
        config["base_dir"],
        config["results_dir"],
        "{TF}",
        "motifs",
        "jaspar",
        "logos",
        "{TF}_peak-motifs_m{n}_logo.png"
    ),
    zip,
    TF=TFs,
    n=NB
)

# Matrix sites
MOTIF_RSAT_SITES = expand(
    os.path.join(
        config["base_dir"], 
        config["results_dir"],
        "{TF}",
        "matrix_sites",
        "{TF}_peak-motifs_m{n}.tf.sites"
    ),
    zip,
    TF=TFs,
    n=NB
)
MOTIF_RSAT_SITES_BED = expand(
    os.path.join(
        config["base_dir"], 
        config["results_dir"],
        "{TF}",
        "matrix_sites",
        "{TF}_peak-motifs_m{n}.tf.sites.bed"
    ),
    zip,
    TF=TFs,
    n=NB
)
MOTIF_RSAT_SITES_FASTA = expand(
    os.path.join(
        config["base_dir"], 
        config["results_dir"],
        "{TF}",
        "matrix_sites",
        "{TF}_peak-motifs_m{n}.tf.sites.fa"
    ),
    zip,
    TF=TFs,
    n=NB
)

# PWM scanning
PWM_SCAN = expand(
    os.path.join(
        config["base_dir"], 
        config["results_dir"],
        "{TF}",
        "scan",
        "501bp",
        "{TF}_m{n}.501bp.fa"
    ),
    zip,
    TF=TFs,
    n=NB
)

# # Central erichment
# CENTRIMO_PVAL = expand(os.path.join(config["results_dir"], "{TF}",
#     "central_enrichment", "{TF}_m{n}.501bp.fa.sites.centrimo"), zip, TF=TFs,
#     n=NB)
# CENTRIMO_PLOT = expand(os.path.join(config["results_dir"], "{TF}",
#     "central_enrichment", "{TF}_m{n}.501bp.fa.sites.centrimo.pdf"), zip, TF=TFs,
#     n=NB)
# CENTRIMO_BEST = expand(os.path.join(config["results_dir"], "{TF}",
#     "central_enrichment", "selected_motif",
#     "{TF}.501bp.fa.sites.centrimo.best"), TF=TFs)
# MOST_ENRICHED_MOTIF_ASSOC = expand(os.path.join(config["results_dir"], "{TF}",
#     "central_enrichment", "selected_motif",
#     "{TF}.501bp.fa.sites.centrimo.best.TF_associated"), TF=TFs)
# MOST_ENRICHED_MOTIF_ASSOC_LOGO = expand(os.path.join(config["results_dir"],
#     "{TF}", "central_enrichment", "selected_motif",
#     "{TF}.501bp.fa.sites.centrimo.best.TF_associated.tex"), TF=TFs, n=NB)

# # Selected motifs to curate
# MOTIFS_TO_CURATE = os.path.join(config["results_dir"],
#     "Selected_motifs_to_curate_log10_pval_-200.tab")
# MOTIFS_TO_CURATE_PDF = os.path.join(config["results_dir"],
#     "Selected_motifs_to_curate_log10_pval_-200.pdf")

rule all:
    input:
        EXTENDED_PEAKS_BED,
        PEAKS_FASTA,
        MOTIFS_RSAT_TF,
        MOTIFS_RSAT_JASPAR,
        JASPAR_PWM,
        JASPAR_LOGO,
        MOTIF_RSAT_SITES,
        MOTIF_RSAT_SITES_BED,
        MOTIF_RSAT_SITES_FASTA,
        # PWM_SCAN,
        # CENTRIMO_PVAL,
        # CENTRIMO_PLOT,
        # CENTRIMO_BEST,
        # MOST_ENRICHED_MOTIF_ASSOC,
        # MOST_ENRICHED_MOTIF_ASSOC_LOGO,
        # MOTIFS_TO_CURATE,
        # MOTIFS_TO_CURATE_PDF

# +++++++++++++++++++ #
# Extend peak summits #
# +++++++++++++++++++ #
rule Extend_peak_summits:
    """
    Extend peak summits to both sides.
    """
    input:
        os.path.join(
            config["base_dir"],
            config["data_dir"],
            "{TF}",
            "{TF}_peak_summits.bed"
        )
    message:
        "; Extend peak summits - TF: {wildcards.TF} - LEN: {wildcards.length}"
    output:
        os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "extended_peaks",
            "{TF}.{length}bp.bed"
        )
    params:
        prog = "bedtools slop",
        b = lambda wildcards: (int(wildcards.length) - 1 / 2),
        g = os.path.join(
            config["base_dir"],
            config["genomes_dir"],
            "%s.chrom.sizes" % config["genome"]
        )
    priority:
        100
    shell:
        """
        {params.prog} -b {params.b} -i {input} -g {params.g} > {output}
        """

# +++++++++++++++++++ #
# Get FASTA sequences #
# +++++++++++++++++++ #
rule Get_FASTA_sequences:
    """
    Get the FASTA sequences of the extended peaks.
    """
    input:
        os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "extended_peaks",
            "{TF}.{length}bp.bed"
        )
    message:
        "; Get FASTA sequences - TF: {wildcards.TF} - LEN: {wildcards.length}"
    output:
        os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "fasta",
            "{TF}.{length}bp.fa"
        )
    params:
        prog = "bedtools getfasta",
        fi = os.path.join(
            config["base_dir"],
            config["genomes_dir"],
            "%s.fa" % config["genome"]
        )
    priority:
        99
    shell:
        """
        {params.prog} -fi {params.fi} -bed {input} -fo {output}
        """

# ++++++++++++++++++++ #
# Run RSAT peak-motifs #
# ++++++++++++++++++++ #
rule Run_RSAT_peak_motifs:
    """
    Run RSAT peak-motifs (motif discovery with different algorithms) on each
    set of peaks.

    The set of discovered motifs is stored in a single file in TRANSFAC format.
    """
    input:
        os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "fasta",
            "{TF}.101bp.fa"
        )
    message:
        "; Run RSAT peak-motifs - TF: {wildcards.TF}"
    output:
        os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "peak-motifs",
            "results",
            "discovered_motifs",
            "{TF}_motifs_discovered.tf"
        )
    params:
        prog = "rsat peak-motifs",
        disco = "oligos,dyads,positions,local_words",
        nmotifs = "5",
        minol = "6",
        maxol = "7",
        ci = "25",
        jaspar2020 = os.path.join(
            config["base_dir"],
            config["motifs_dir"],
            "JASPAR2020_CORE_vertebrates_non-redundant_pfms.tf"
        ),
        task = ",".join([
            "purge", "seqlen", "composition", "disco", "merge_motifs",
            "split_motifs", "motifs_vs_motifs", "timelog", "archive",
            "synthesis", "small_summary", "motifs_vs_db", "scan"
        ]),
        prefix = "{TF}",
        outdir = os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "peak-motifs"
        )
    priority:
        98
    shell:
        """
        {params.prog} -v 2 \
        -r_plot \
        -title {wildcards.TF} \
        -i {input} \
        -markov auto \
        -disco {params.disco} \
        -nmotifs {params.nmotifs} \
        -minol {params.minol} \
        -maxol {params.maxol} \
        -no_merge_lengths \
        -ci {params.ci} \
        -noov \
        -2str \
        -origin center \
        -motif_db jaspar_core_nonredundant_vertebrates tf {params.jaspar2020} \
        -scan_markov 1 \
        -task {params.task} \
        -prefix {params.prefix} \
        -img_format png \
        -outdir {params.outdir}
        """

# +++++++++++++++++++++++ #
# Run RSAT convert-matrix #
# +++++++++++++++++++++++ #
rule Run_RSAT_convert_matrix:
    """
    Run RSAT convert-matrix on each set of discovered motifs.

    The TRANSFAC file is split into several files (one per motif) adding as
    suffix the motif number (e.g. 1, 2, 3, etc.). The resulting motifs are
    stored as position count matrices (PCMs) in JASPAR format.
    """
    input:
        os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "peak-motifs",
            "results",
            "discovered_motifs",
            "{TF}_motifs_discovered.tf"
        )
    message:
        "; Convert motifs from TRANSFAC to JASPAR format - TF: {wildcards.TF}"
    output:
        os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "motifs",
            "jaspar",
            "pfm",
            "{TF}_matrix_list.tab"
        )
    params:
        prog = "rsat convert-matrix",
        prefix = "peak-motifs",
        o = os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "motifs",
            "jaspar",
            "pfm",
            "{TF}"
        ),
        r = "counts"
    priority:
        97
    shell:
        """
        {params.prog} -v 2 \
        -from tf -to jaspar \
        -i {input} \
        -return {params.r} \
        -split \
        -prefix {params.prefix} \
        -o {params.o} ;

        {params.prog} -v 2 \
        -from tf -to tab \
        -i {input} \
        -return {params.r} \
        -split \
        -prefix {params.prefix} \
        -o {params.o}
        """

# ++++++++++++++++++++ #
# Convert PCMs to PWMs #
# ++++++++++++++++++++ #
rule Convert_PCMs_to_PWMs:
    """
    Convert the PCMs in JASPAR format to PWMs.

    This rule is executed for each discovered motif.
    """
    input:
        os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "motifs",
            "jaspar",
            "pfm",
            "{TF}_peak-motifs_m{n}.jaspar"
        )
    message:
        "; Convert JASPAR PCMs to PWMs - TF: {wildcards.TF} - MAT: {wildcards.n}"
    output:
        os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "motifs",
            "jaspar",
            "pwm",
            "{TF}_peak-motifs_m{n}.jaspar.pssm"
        )
    params:
        prog = os.path.join(
            config["base_dir"],
            config["scripts_dir"],
            "pcm2pwm.py"
        ),
        outdir = os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "motifs",
            "jaspar",
            "pwm"
        )
    priority:
        96
    shell:
        """
        mkdir -p {params.outdir}
        python {params.prog} {input} > {output}
        """

# ++++++++++++++++++++ #
# Generate motif logos #
# ++++++++++++++++++++ #
rule Generate_motif_logos:
    """
    Generate a logo for each JASPAR PCM.

    This rule is executed for each discovered motif.
    """
    input:
        os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "motifs",
            "jaspar",
            "pfm",
            "{TF}_peak-motifs_m{n}.jaspar"
        )
    message:
        "; Generate motif logos - TF: {wildcards.TF} - MAT: {wildcards.n}"
    output:
        os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "motifs",
            "jaspar",
            "logos",
            "{TF}_peak-motifs_m{n}_logo.png"
        )

    params:
        prog = os.path.join(
            config["base_dir"],
            config["scripts_dir"],
            "pcm2logo.py"
        ),
        outdir = os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "motifs",
            "jaspar",
            "logos"
        )
    priority:
        95
    shell:
        """
        mkdir -p {params.outdir}
        python {params.prog} {input} {output}
        """

# ++++++++++++++++++++++++++ #
# Run RSAT matrix-scan-quick #
# ++++++++++++++++++++++++++ #
rule Run_RSAT_matrix_scan_quick:
    """
    Find the binding sites used to built the matrices.

    This rule is executed for each discovered motif.
    """
    input:
        i = os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "peak-motifs",
            "data",
            "sequences",
            "{TF}_test.fasta"
        ),
        m = os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "motifs",
            "jaspar",
            "pfm",
            "{TF}_peak-motifs_m{n}.tab"
        ),
        bgfile = os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "peak-motifs",
            "results",
            "composition",
            "{TF}_test_inclusive-1str-ovlp_2nt.txt"
        )
    message:
        "; Run RSAT matrix-scan-quick - TF: {wildcards.TF} - MAT: {wildcards.n}"
    output:
        os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "matrix_sites",
            "{TF}_peak-motifs_m{n}.tf.sites"
        )
    params:
        prog = "RSAT matrix-scan-quick",
        outdir = os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "matrix_sites",
        )
    priority:
        94
    shell:
        """
        mkdir -p {params.outdir}
        {params.prog}  \
        -i {input.i} \
        -m {input.m} \
        -bgfile {input.bgfile} \
        -t 5 \
        -return sites > {output}
        """

# ++++++++++++++++++++ #
# Get site coordinates #
# ++++++++++++++++++++ #
rule Get_site_coordinates:
    """
    Get the genomic coordinates (BED file) of the matrix sites.

    This rule is executed for each discovered motif.
    """
    input:
        os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "matrix_sites",
            "{TF}_peak-motifs_m{n}.tf.sites"
        )
    message:
        "; Get coordinates of sites - TF: {wildcards.TF} - MAT: {wildcards.n}"
    output:
        os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "matrix_sites",
            "{TF}_peak-motifs_m{n}.tf.sites.bed"
        )
    params:
        prog = os.path.join(
            config["base_dir"],
            config["scripts_dir"],
            "sites-to-bed.awk"
        ),
        genome = config["genome"]
    priority:
        93
    shell:
        """
        awk -f {params.prog} -v genome="{params.genome}" {input} > {output}
        """

# ++++++++++++++++++ #
# Get site sequences #
# ++++++++++++++++++ #
rule Get_site_FASTA_sequences:
    """
    Get the FASTA sequences of the of the matrix sites.

    This rule is executed for each discovered motif.
    """
    input:
        os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "matrix_sites",
            "{TF}_peak-motifs_m{n}.tf.sites.bed"
        )
    message:
        "; Get sequences of sites - TF: {wildcards.TF} - MAT: {wildcards.n}"
    output:
        os.path.join(
            config["base_dir"],
            config["results_dir"],
            "{TF}",
            "matrix_sites",
            "{TF}_peak-motifs_m{n}.tf.sites.fa"
        )
    params:
        prog = "bedtools getfasta",
        fi = os.path.join(
            config["base_dir"],
            config["genomes_dir"],
            "%s.fa" % config["genome"]
        )
    priority:
        92
    shell:
        """
        {params.prog} -name -s -fi {params.fi} -bed {input} -fo {output}
        """

# # +++++++++++++++++++ #
# # Scan extended peaks #
# # +++++++++++++++++++ #
# rule Scan_extended_peaks:
#     """
#     Scan the PWM against the extended peaks (501bp).
#     Ex. output:
#     chr1:1097570-1098571	TFBS			+	-54.169	  23.4	16	37	seq...
#     chr1:1097570-1098571	TFBS			-	24.309	  89.5	16	37	seq...
#     chr1:1097570-1098571	TFBS			+	-53.356	  24.1	17	38	seq...
#     chr1:1097570-1098571	TFBS			-	24.386	  89.6	17	38	seq...
#     ...

#     This rule is executed for each discovered motif.
#     """
#     input:
#         pwm = os.path.join(
#             config["base_dir"],
#             config["results_dir"],
#             "{TF}",
#             "motifs",
#             "jaspar",
#             "pwm",
#             "{TF}_peak-motifs_m{n}.jaspar.pssm"
#         ),
#         fasta = os.path.join(
#             config["base_dir"], 
#             config["results_dir"],
#             "{TF}",
#             "fasta",
#             "{TF}.501bp.fa"
#         )
#     message:
#         "; Scan extended peaks - TF: {wildcards.TF} - MAT: {wildcards.n}"
#     output:
#         os.path.join(
#             config["base_dir"], 
#             config["results_dir"],
#             "{TF}",
#             "scan",
#             "501bp",
#             "{TF}_m{n}.501bp.fa"
#         )
#     params:
#         prog = os.path.join(
#             config["base_dir"],
#             config["scripts_dir"],
#             "scan-sequences.sh"
#         ),
#         outdir = os.path.join(
#             config["base_dir"],
#             config["results_dir"],
#             "{TF}",
#             "scan",
#             "501bp"
#         )
#     priority:
#         91
#     shell:
#         """
#         mkdir -p {params.outdir}
#         {params.prog} {input.pwm} {input.fasta} {output}
#         """

# ###############################
# ## Centrality test and plots ##
# ###############################
# rule Calculate_centrimo_pvalue:
#     """
#     Calculate p-value for central enrichment.

#     This rule is executed for each discovered motif.
#     """
#     input:
#         sites = os.path.join(config["out_dir"], "{TF}", "scan", "501bp", "{TF}_m{n}.501bp.fa"),
#         peaks = os.path.join(config["out_dir"], "{TF}", "extended_peaks", "{TF}.501bp.bed")
#     output:
#         os.path.join(config["out_dir"], "{TF}", "central_enrichment", "{TF}_m{n}.501bp.fa.sites.centrimo")
#     message:
#         "; Calculating central enrichment around peak summits - TF : {wildcards.TF} - Matrix number: {wildcards.n}"
#     params:
#         scripts_bin = config["bin"],
#         centrimo_folder = os.path.join(config["out_dir"], "{TF}", "central_enrichment")
#     priority:
#         89
#     shell:
#         """
#         mkdir -p {params.centrimo_folder} ;

#         nb_TFBS="$(wc -l {input.sites} | cut -d ' ' -f 1)" ;

#         nb_peaks="$(wc -l {input.peaks} | cut -d " " -f 1)" ;

#         {params.scripts_bin}/centrimo_pval {input.sites} ${{nb_TFBS}} ${{nb_peaks}} 250 > {output}
#         """

# rule generate_centrimo_plots:
#     """
#     Generate centrimo plots (local enrichment) around the peak summits.

#     This rule is executed for each discovered motif.
#     """
#     input:
#         os.path.join(config["out_dir"], "{TF}", "scan", "501bp", "{TF}_m{n}.501bp.fa")
#     output:
#         os.path.join(config["out_dir"], "{TF}", "central_enrichment", "{TF}_m{n}.501bp.fa.sites.centrimo.pdf")
#     message:
#         "; Scanning PSSM - TF : {wildcards.TF} - Matrix number: {wildcards.n}"
#     params:
#         scripts_bin = config["bin"]
#     priority:
#         88
#     shell:
#         """
#         R --vanilla --slave --silent -f {params.scripts_bin}/centrimo_plot.R --args {input} {output}
#         """

# rule choose_best_centrimo_experiment:
#     """
#     Select the motif with the best (lowest) centrimo p-value.

#     This rule is executed for each dataset (experiment).
#     """
#     input:
#         os.path.join(config["out_dir"], "{TF}", "motifs", "jaspar", "pfm", "{TF}_matrix_list.tab")
#     output:
#         os.path.join(config["out_dir"], "{TF}", "central_enrichment", "selected_motif", "{TF}.501bp.fa.sites.centrimo.best")
#     message:
#         "; Selecting the most centrally enriched motif - TF : {wildcards.TF} "
#     params:
#         scripts_bin = config["bin"],
#         centrimo_dir = os.path.join(config["out_dir"], "{TF}", "central_enrichment")
#     priority:
#         87
#     shell:
#         """
#         bash {params.scripts_bin}/best_centrimo.sh -i {params.centrimo_dir} > {output}
#         """

# ## NOTE 4: the awk variables are relative to the experiment table.
# rule annotate_best_centrimo_experiment:
#     """
#     Assign the TF name to the selected motif.

#     This rule is executed for the best experiment of each dataset (experiment). Make sure the experiment map has the experiment ID in the first field, and the TF name in the third field
#     """
#     input:
#         #tf_jaspar_map = config["TF_Experiment_map"],
#         best_exp = os.path.join(config["out_dir"], "{TF}", "central_enrichment", "selected_motif", "{TF}.501bp.fa.sites.centrimo.best")
#     output:
#         os.path.join(config["out_dir"], "{TF}", "central_enrichment", "selected_motif", "{TF}.501bp.fa.sites.centrimo.best.TF_associated")
#     message:
#         "; Assigning TF name to the experiment: {wildcards.TF} "
#     params:
#         experiment = "{TF}",
#         scripts_bin = config["bin"]
#     priority:
#         86
#     shell:
#         """
#         perl {params.scripts_bin}/annotate_best_centrimo_experiment.pl --best {input.best_exp} --experiment {params.experiment} --output {output}
#         """

# rule best_centrimo_experiment_logo:
#     """
#     Export a PDF file with the motif logo, experiment, TF name and centrality p-value.

#     This rule is executed for the best experiment of each dataset (experiment).
#     """
#     input:
#         os.path.join(config["out_dir"], "{TF}", "central_enrichment", "selected_motif", "{TF}.501bp.fa.sites.centrimo.best.TF_associated")
#     output:
#         os.path.join(config["out_dir"], "{TF}", "central_enrichment", "selected_motif", "{TF}.501bp.fa.sites.centrimo.best.TF_associated.tex")
#     message:
#         "; Generating latex logo for selected motif: {wildcards.TF} "
#     params:
#         scripts_bin = config["bin"]
#     priority:
#         85
#     shell:
#         """
#         bash {params.scripts_bin}/create_latex_logos.sh -l {params.scripts_bin}/latex_header.txt -i {input} -o {output}
#         """

# rule Concat_annotated_experiments:
#     """
#     Concatenate the tables with the annotated experiments and the centrality p-value

#     """
#     input:
#         MOST_ENRICHED_MOTIF_ASSOC
#     output:
#         os.path.join(config["curation_dir"], "Annotated_experiments_cat.tab")
#     message:
#         "; Concatenating the tables with the annotated experiments and the centrality p-value "
#     params: out_dir = config["out_dir"]
#     priority:
#         84
#     shell:
#         """
#         ls {params.out_dir}/*/central_enrichment/selected_motif/*.501bp.fa.sites.centrimo.best.TF_associated | xargs cat > {output}
#         """


# rule Select_motifs_to_curate:
#     """
#     Select those motifs satisfying the centrality p-value threshold.

#     """
#     input:
#         os.path.join(config["curation_dir"], "Annotated_experiments_cat.tab")
#     output:
#         os.path.join(config["curation_dir"], "Selected_motifs_to_curate_log10_pval_-200.tab")
#     message:
#         "; Selecting motifs to curate - Centrality p-value: {{config['central_pvalue']}} "
#     params:
#         central_pval = "-200"
#     priority:
#         83
#     shell:
#         """
#         cat {input} | awk '{{ if ($5 <= {params.central_pval}) {{ print }} }}' | uniq > {output}
#         """


# rule Motifs_to_curate_PDF:
#     """
#     Concat the PDF of the selected motifs
#     """
#     input:
#         os.path.join(config["curation_dir"], "Selected_motifs_to_curate_log10_pval_-200.tab")
#     output:
#         os.path.join(config["curation_dir"], "Selected_motifs_to_curate_log10_pval_-200.pdf")
#     message:
#         "; Concatenating PDFs with the motifs to curate "
#     priority:
#         82
#     shell:
#         """
#         PDF_FILES=` awk '{{ print $7 }}' {input} | xargs `

#         pdfunite $PDF_FILES {output}
#         """
