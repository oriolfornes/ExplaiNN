#!/bin/bash

# pwm_convert: Matrix conversion utility
#
#  Convert JASPAR, TRANSFAC, PFM, LPM, and real PWM formats
#  to integer log likelihoods (log-odds) format.
#
#  arguments:
#              matrix-file
#              matrix format
#              bg base composition
#              pseudo-count fraction
#              minimal log score
#              log scaling factor
#
#  02.11.2107  Giovanna Ambrosini

ARGS=2         # Script takes 6 arguments, but at least 2 arguments are mandatory.
E_BADARGS=85   # Wrong number of arguments passed to script.

bg_freq=""
pseudocnt=0
minscore=-10000
logscl=100
mult=100
format=""

function usage()
{
  echo "Usage: `basename $0` <matrix-file> -f=<format [jaspar|transfac|lpm|pfm|real]>"
  echo ""
  echo "OPTIONS:"
  echo -e "\t-h                  show help message"
  echo -e "\t-b=<bg-freq-file>   bg nucleotide composition file"
  echo -e "\t-c=<pseudo-cnt>     pseudo-count fraction [def=$pseudocnt]"
  echo -e "\t-m=<minscore>       minimal score value [def=$minscore]"
  echo -e "\t-n=<log-scaling>    log scaling factor [def=$logscl]" 
  echo -e "\t-s=<mult>           matrix multiplication factor (for real PWMs) [def=$mult]" 
  echo -e ""
  echo -e "\tConvert JASPAR, TRANSFAC, PFM, LPM and real PWM formats to integer log likelihoods (log-odds) format."
  echo ""
}

if [ $# -lt "$ARGS" ]
then
  usage
  exit $E_BADARGS
fi

if [ -f "$1" ]
then
    matrix_file=$1
else
    echo "File \"$1\" does not exist."
    exit $E_BADARGS
fi

bg_freq="bg_probs.txt"
echo -e "A 0.25\nC 0.25\nG 0.25\nT 0.25" > $bg_freq

if [ "$2" != "" ]
then
  format=`echo $2 | awk -F= '{print $2}'`
fi

while [ "$3" != "" ]; do
  PARAM=`echo $3 | awk -F= '{print $1}'`
  VALUE=`echo $3 | awk -F= '{print $2}'`
  case $PARAM in
      -h)
          usage
          exit
          ;;
      -b)
          bg_freq=$VALUE
          ;;
      -c)
          pseudocnt=$VALUE
          ;;
      -m)
          minscore=$VALUE
          ;;
      -n)
          logscl=$VALUE
          ;;
      -s)
          mult=$VALUE
          ;;
      *)
          echo "ERROR: unknown parameter \"$PARAM\""
          usage
          exit 1
          ;;
  esac
  shift
done

bin_dir=$(echo /home/local/bin)

echo "BG base composition file: $bg_freq" >&2;
cat $bg_freq >&2;
echo "Pseudo-count fraction: $pseudocnt" >&2;
echo "Monimal score value:   $minscore" >&2;
echo "Log scaling factor:    $logscl" >&2;

# Extract basename from matrix file (without path)
matrix_name=$(basename "$matrix_file")
extension="${matrix_name##*.}"
matrix_name="${matrix_name%.*}"

echo "PWM name: $matrix_name" >&2
echo "PWM format: $format" >&2

echo "========               Computing PWM length               ========" >&2
matrix_len=$(cat $matrix_file | perl -ane 'next if (/^#/ or /^>/); print;' | wc -l)

file_len=$(cat $matrix_file | wc -l)

echo "PWM file: $matrix_file" >&2
echo "PWM length: $matrix_len" >&2
echo "PWM file length : $file_len" >&2

matrix_file_tmp=$matrix_file".tmp"

echo "========                PWM conversion                     ========" >&2
if [ $format == 'jaspar' ]
then
  if [ $(echo "$pseudocnt > 0" | bc) -eq 1 ]
  then
    echo "$bin_dir/jasparconvert.pl -c $pseudocnt -m $minscore -n $logscl -bg $bg_freq -w l -noheader -o $matrix_file_tmp $matrix_file 1>/dev/null 2>/dev/null" >&2
    $bin_dir/jasparconvert.pl -c $pseudocnt -m $minscore -n $logscl -bg $bg_freq -w l -noheader -o $matrix_file_tmp $matrix_file 1>/dev/null 2>/dev/null; cat $matrix_file_tmp    
  else
    echo "$bin_dir/jasparconvert.pl -m $minscore -n $logscl -bg $bg_freq -w l -noheader -o $matrix_file_tmp $matrix_file 1>/dev/null 2>/dev/null" >&2
    $bin_dir/jasparconvert.pl -m $minscore -n $logscl -bg $bg_freq -w l -noheader -o $matrix_file_tmp $matrix_file 1>/dev/null 2>/dev/null; cat $matrix_file_tmp    
  fi
fi

if [ $format == 'transfac' ]
then
  if [ $(echo "$pseudocnt > 0" | bc) -eq 1 ]
  then
    echo "$bin_dir/transfaconvert.pl -c $pseudocnt -m $minscore -n $logscl -bg $bg_freq -w l -noheader -o $matrix_file_tmp $matrix_file 1>/dev/null 2>/dev/null" >&2
    $bin_dir/transfaconvert.pl -c $pseudocnt -m $minscore -n $logscl -bg $bg_freq -w l -noheader -o $matrix_file_tmp $matrix_file 1>/dev/null 2>/dev/null; cat $matrix_file_tmp    
  else
    echo "$bin_dir/transfaconvert.pl -m $minscore -n $logscl -bg $bg_freq -w l -noheader -o $matrix_file_tmp $matrix_file 1>/dev/null 2>/dev/null" >&2
    $bin_dir/transfaconvert.pl -m $minscore -n $logscl -bg $bg_freq -w l -noheader -o $matrix_file_tmp $matrix_file 1>/dev/null 2>/dev/null; cat $matrix_file_tmp    
  fi
fi

if [ $format == 'pfm' ]
then
  if [ $(echo "$pseudocnt > 0" | bc) -eq 1 ]
  then
    echo "$bin_dir/pfmconvert.pl -c $pseudocnt -m $minscore -n $logscl -bg $bg_freq -noheader -o $matrix_file_tmp $matrix_file 1>/dev/null 2>/dev/null" >&2
    $bin_dir/pfmconvert.pl -c $pseudocnt -m $minscore -n $logscl -bg $bg_freq -noheader -o $matrix_file_tmp $matrix_file 1>/dev/null 2>/dev/null; cat $matrix_file_tmp    
  else
    echo "$bin_dir/pfmconvert.pl -m $minscore -n $logscl -bg $bg_freq -noheader -o $matrix_file_tmp $matrix_file 1>/dev/null 2>/dev/null" >&2
    $bin_dir/pfmconvert.pl -m $minscore -n $logscl -bg $bg_freq -noheader -o $matrix_file_tmp $matrix_file 1>/dev/null 2>/dev/null; cat $matrix_file_tmp    
  fi
fi

if [ $format == 'lpm' ]
then
  if [ $(echo "$pseudocnt > 0" | bc) -eq 1 ]
  then
    echo "$bin_dir/lpmconvert.pl -c $pseudocnt -m $minscore -n $logscl -bg $bg_freq -noheader -o $matrix_file_tmp $matrix_file 1>/dev/null 2>/dev/null" >&2
    $bin_dir/lpmconvert.pl -c $pseudocnt -m $minscore -n $logscl -bg $bg_freq -noheader -o $matrix_file_tmp $matrix_file 1>/dev/null 2>/dev/null; cat $matrix_file_tmp    
  else
    echo "$bin_dir/lpmconvert.pl -m $minscore -n $logscl -bg $bg_freq -noheader -o $matrix_file_tmp $matrix_file 1>/dev/null 2>/dev/null" >&2
    $bin_dir/lpmconvert.pl -m $minscore -n $logscl -bg $bg_freq -noheader -o $matrix_file_tmp $matrix_file 1>/dev/null 2>/dev/null; cat $matrix_file_tmp    
  fi
fi

if [ $format == 'real' ]
then
  echo "$bin_dir/pwmconvert.pl -n $mult -noheader -o $matrix_file_tmp $matrix_file 1>/dev/null 2>/dev/null" >&2
  $bin_dir/pwmconvert.pl -n $mult -noheader -o $matrix_file_tmp $matrix_file 1>/dev/null 2>/dev/null; cat $matrix_file_tmp
fi

rm $matrix_file_tmp
